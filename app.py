from flask import Flask, request, flash, redirect, url_for, render_template
from models import *
from checker import Check

app = Flask(__name__)


# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    db.connect()


# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exc):
    if not db.is_closed():
        db.close()


# Homepage
@app.route('/')
def index():
    return 'You\'ve just got your application code! Please, check out your mailbox to log in.'


# Sign up --- registration form
@app.route('/registration', methods=['GET', 'POST'])
def reg_confirmation():
    """Displays and edits registration form"""

    if request.method == "POST":
        incoming_data = (request.form['first_name'],
                         request.form['last_name'],
                         request.form['e_mail'],
                         request.form['location'])

        list_of_booleans = Check.checker(incoming_data[0], incoming_data[1], incoming_data[2])

        # GOOD FORM, CREATES NEW FORM
        if list_of_booleans[:] == [True, True, True]:
            Applicant.create(first_name=request.form['first_name'],
                             last_name=request.form['last_name'],
                             location=request.form['location'],
                             email=request.form['e_mail'])

            # SENDING E_MAILS TO NEWBIES
            Applicant.add_app_code()
            return redirect('/')

        # ERROR IN CHECKER, RETURNS REG.FORM TEMPLATE WITH ERRORS
        else:
            return render_template('registration_form.html',
                                   cities=City.select(),
                                   error=True,
                                   valid=list_of_booleans,
                                   words=incoming_data)
    # GET
    else:
        return render_template('registration_form.html',
                               cities=City.select(),
                               error=False)

if __name__ == '__main__':
    app.run()
